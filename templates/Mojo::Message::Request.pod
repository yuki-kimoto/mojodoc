=encoding utf8

[[Mojolicious API リファレンス|mojo-api-reference]]



=head1 名前

Mojo::Message::Request - HTTPリクエスト

=head1 使い方

  use Mojo::Message::Request;

  # 解析
  my $req = Mojo::Message::Request->new;
  $req->parse("GET /foo HTTP/1.0\x0a\x0d");
  $req->parse("Content-Length: 12\x0a\x0d\x0a\x0d");
  $req->parse("Content-Type: text/plain\x0a\x0d\x0a\x0d");
  $req->parse('Hello World!');
  say $req->method;
  say $req->headers->content_type;
  say $req->body;

  # 構築
  my $req = Mojo::Message::Request->new;
  $req->url->parse('http://127.0.0.1/foo/bar');
  $req->method('GET');
  say $req->to_string;

=head1 説明

[[Mojo::Message::Request]]は、
L<RFC 7230|http://tools.ietf.org/html/rfc7230>、
L<RFC 7231|http://tools.ietf.org/html/rfc7231>、
L<RFC 7235|http://tools.ietf.org/html/rfc7235>、
L<RFC 2817|http://tools.ietf.org/html/rfc2817>、
に基づいた
HTTPリクエストのコンテナです。

=head1 属性

[[Mojo::Message::Request]]は[[Mojo::Message]]のすべての属性を
継承しており、次の新しいメソッドを実装しています。

=head2 env

  my $env = $req->env;
  $req    = $req->env({PATH_INFO => '/'});

利用可能であれば、環境のハッシュに直接アクセスします。

  # CGIのバージョンをチェック
  my $version = $req->env->{GATEWAY_INTERFACE};

  # PSGIのバージョンをチェック
  my $version = $req->env->{'psgi.version'};

=head2 method

  my $method = $req->method;
  $req       = $req->method('POST');

HTTPリクエストメソッド。デフォルトはC<GET>。

=head2 proxy

  my $url = $req->proxy;
  $req    = $req->proxy(Mojo::URL->new('http://127.0.0.1:3000'));

リクエストのためのプロキシURL。

=head2 reverse_proxy

  my $bool = $req->reverse_proxy;
  $req     = $req->reverse_proxy($bool);

リバースプロキシを通して、リクエストが実行されたか。

=head2 request_id

  my $id = $req->request_id;
  $req   = $req->request_id('aee7d5d8');

リクエストID、デフォルトは、合理的なユニークな値。

=head2 url

  my $url = $req->url;
  $req    = $req->url(Mojo::URL->new);

HTTPのリクエストURL。デフォルトは[[Mojo::URL]]オブジェクト。

  # リクエストの情報を取得
  my $info = $req->url->to_abs->userinfo;
  my $host = $req->url->to_abs->host;
  my $path = $req->url->to_abs->path;

=head2 via_proxy

  my $bool = $req->via_proxy;
  $req     = $req->via_proxy($bool);

プロキシサーバーを通して、リクエストが実行されうるか。

=head1 メソッド

[[Mojo::Message::Request]]は[[Mojo::Message]]のすべてのメッセージを
継承しており、次の新しいメソッドを実装しています。

=head2 clone

  my $clone = $req->clone;

可能であればリクエストを複製します。

=head2 cookies

  my $cookies = $req->cookies;
  $req        = $req->cookies(Mojo::Cookie::Request->new);
  $req        = $req->cookies({name => 'foo', value => 'bar'});

リクエストのクッキーにアクセスします。通常は[[Mojo::Cookie::Request]]オブジェクトです。

  # すべてのクッキーの名前
  say $_->name for @{$req->cookies};

=head2 every_param

  my $values = $req->every_param('foo');

c<param>と似ていますが、同じ名前で共有されるすべての値を、
配列のリファレンスとして返却します。

  # 最初の値を取得
  say $req->every_param('foo')->[0];

=head2 extract_start_line

  my $bool = $req->extract_start_line(\$str);

文字列からリクエストを抽出します。

=head2 fix_headers

  $req = $req->fix_headers;

リクエストが、すべての必要なヘッダー
を持っていることを確かにします。

=head2 get_start_line_chunk

  my $bytes = $req->get_start_line_chunk($offset);

特定の位置からリクエストラインのデータを取得します。このメソッドは、リクエストをファイナライズすることに注意してください。

=head2 is_handshake

  my $bool = $req->is_handshake;

C<websocket>の値のためにC<Upgrade>ヘッダをチェックします。

=head2 is_secure

  my $bool = $req->is_secure;

コネクションがセキュアかどうかをチェックします。

=head2 is_xhr

  my $bool = $req->is_xhr;

C<XMLHttpRequest>の値をあらわすためのC<X-Requested-With>ヘッダーをチェックします。

=head2 param

  my $value = $req->param('foo');

クエリ文字列とC<application/x-www-form-urlencoded>、C<multipart/form-data>メッセージボディ
を解析して
C<GET>とC<POST>のパラメーターにアクセスします。
もし同じ名前で共有される複数の値があり、
最後のひとつより多くの値にアクセスしたい場合は、
C<every_param>を使用することができます。
このメソッドはすべてのデータをキャッシュするので、
完全なリクエストボディが到着する前に呼び出さないように
注意する必要があります。
リクエストボディの各部分は、POSTパラメーターを解析するために、
メモリ上に展開されるので、大きすぎないようにする必要があります。
これには、デフォルトで16MBの制限があります。

=head2 params

  my $params = $req->params;

クエリ文字列とC<application/x-www-form-urlencoded>、C<multipart/form-data>メッセージボディ
を解析して、
すべてのC<GET>とC<POST>のパラメーターを取得します。通常はは[[Mojo::Parameters]]オブジェクト。
このメソッドはすべてのデータをキャッシュするので、
完全なリクエストボディが到着する前に呼び出さないように
注意する必要があります。
リクエストボディの各部分は、POSTパラメーターを解析するために、
メモリ上に展開されるので、大きすぎないようにする必要があります。
これには、デフォルトで16MBの制限があります。

  # パラメーター名と値を取得
  my $hash = $req->params->to_hash;

=head2 parse

  $req = $req->parse('GET /foo/bar HTTP/1.1');
  $req = $req->parse({PATH_INFO => '/'});

HTTPリクエストの断片、あるいは環境のハッシュを解析します。

=head2 query_params

  my $params = $req->query_params;

すべてのC<GET>のパラメーター。通常は[[Mojo::Parameters]]オブジェクト。

  # GETパラメーターをハッシュに変換して値を取り出す
  say $req->query_params->to_hash->{'foo'};

=head2 start_line_size

  my $size = $req->start_line_size;

リクエストラインのバイトサイズ。このメソッドは、リクエストをファイナライズすることに注意してください。

=head1 参考

L<Mojolicious>, L<Mojolicious::Guides>, L<http://mojolicio.us>.

(Mojolicious 8.12を反映。2019年5月23日更新)

=cut