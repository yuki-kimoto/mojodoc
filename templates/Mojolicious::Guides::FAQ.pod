=encoding utf8

[[Mojoliciosuガイド|Home]]

=head1 Mojolicious::Guides::FAQ

=head1 名前

Mojolicious::Guides::FAQ - 頻繁に尋ねられる質問

=head1 概観

このドキュメントはMojoliciousに関してもっとも頻繁に尋ねられる質問と答えをふくんでいます。

=head1 質問

=head2 Mojoliciousは他のPerlのWebフレームワークとどのように比較することができますか

「Webフレームワーク」という言葉は、他のよりもより逐語的に解釈されるので、
短い答えとしては「できない」というものです。
リアルタイムWebやWebSocketのような新しいテクノロジーが出現して、
LWPのように一般的に利用されてきたモジュールが設計されたことを超えた、
新しい挑戦に直面しています。
このために、Mojoliciousは、Mojoと呼ばれる完全に新しいHTTPクライアント/サーバースタックを含んでいいます。これは、もともとはLWPngの努力によって強く鼓舞され、注意深く新しい要求のためにデザインされたものです。
それで、上位の抽象レイヤーのいくつかは、他のWebフレームワークと似ているように見えますが、
実際は完全に新しいカテゴリーとして定義され、未来のより進んだカテゴリーとして、
基礎付けられるのではないかとさえ考えています。

=head2 なぜMojoliciousはまったく依存を持たないのですか

私たちは妥協することなく使いやすさと開発スピードに焦点をあてて[[Mojolicious]]を最適化しています。
[[Mojolicious::Guides::CodingGuidelines]]には依存を禁止するルールはありませんが、
すばやい苦労のないインストール処理を好むので、今のところオプショナルなものではないものを
追加する気持ちは起きません。
実際はすでに、高度な機能を提供するために、もしインストールされているのであれば、
L<EV>, L<IO::Socket::IP>, L<IO::Socket::SSL>,L<Net::DNS::Native>、
 L<Plack>などのいくつかのオプショナルなモジュールを利用しています。

=head2 なぜ再発明をするのですか

それらを応用可能なものにできるからです。
使いやすさと開発スピードを焦点にあててデザインされたコンポーネントを
手に入れるのは簡単ではありません。
「ひとつ以上のやり方がある」というPerlのマントラを強く信じていますが、
よくデザインされたデフォルトはユーザーの経験によりよい楽しさをもたらすものである
ということも信じています。
両方のよい部分がほしいのです。

=head2 後方互換性についてはどうですか

[[Mojolicious::Guides::Contributing]]との一致において、
互換性のない方法において、削除や変更がある前に、
最新のひとつのメジャーリリースのなかで、その機能を
いつも廃止予定にします。
しかしながら、新しい機能は実験的なものとマークされ、このルールの除外になっています。
これは[[Mojolicious]]の健全な未来を保証するために、必要な自由を与えます。
それで、実験的でない機能、試験されていない機能、ドキュメントされていない機能を使っていない限りは、
後方互換性をいつも期待することができ、そうでないものはバグと考えられます。
ただし、偶発的な破損のリスクを完全に回避するには、
バージョン固定の現在のベストプラクティスに従うことをお勧めします
生産セットアップ用のL<Carton>。

=head2 なぜMojoliciousは多くの小さなディストリビューションに分割されないのですか

利点がないからです。
それを行うことは、わたしたちにメリットはないですが、メンテナンスコストを大幅に情報させ、
インストールの時間を増加させます。
モジュールの所有を新しいメンテナに渡せるときだけ意味があるかもしれませんが、
わたしたちはすでに過去にそれを行っています。

=head2 Mojoliciousのパッチについてどこで議論できますか？

公式IRCでL <Mojolicious>への貢献を議論したいと思います
C <irc.freenode.net>のチャネルC <#mojo>（L<chat
now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?>）。

=head2 どのバージョンのPerlをMojoliciousはサポートしていますか。

最初に、L<perlpolicy>に関することに気がつく必要があります。
コミュニティは最近のふたつの安定したリリースだけを
サポートします。これは現在は、5.28.x and 5.26.xです。
[[Mojolicious]]はこのモデルにしがたい、これらのふたつのリリースを
完全にサポートします。
加えて、サポートする価値があると考えるある古いバージョンまで、
Mojoliciousのディストリビューションをインストールできるようにしています。
最適化はされません。これは現在は5.10.1です。

Perlバージョン5.10.xおよび5.12.xは、
L <Mojolicious>、安定性を避けるためにそれらを使用しないことを強くお勧めします
およびセキュリティの問題。コミュニティ内の非常にボーカルな少数派ではない場合
これらのバージョンはまったくサポートしません。

=head2 WindowsはMojoliciousでどの程度サポートされていますか？

ディストリビューションをインストール可能な状態にするよう努力しますが、
Windowsは、L<Mojolicious>によって公式にサポートされていません。
。深刻なセキュリティがあるか、または信頼性の問題があります。
次のようなより高度な機能の一部L<subprocesses|Mojo::IOLoop/"subprocess"> and the
L<Hypnotoad|Mojo::Server::Hypnotoad>。
Webサーバーでは、次の使用も必要です。
L<Windows Subsystem for Linux|https://msdn.microsoft.com/commandline/wsl/>

=head2 Mojoliciousをテストする前に、環境をクリーンにする必要がありますか

Mojoliciousは、内部的にも外部的にも、多くの環境変数を使用しています。
これらはC<Mojo_*>というプレフィックスを持ちます。
テストケースは、クリーンな環境を想定しています。
標準ではない環境で試験を行う場合は、サポートしていません。
テストは成功しないかもしれません。
それゆえ、Mojoliciousをインストールまたはアップグレードすし、
テストを実行するときは、これらの変数を設定しない環境で、
行うことを推奨します。

=head2 ファイル拡張子は、どこに行ってしまったのですか。

標準のルートプレースホルダーは、C<.>文字にはマッチしません。
しかしながら、
[[Mojolicious]]のルートは、C<.html>のようなファイル拡張子を見、
続くC<.>を除去し、C<format>スタッシュ値の中に、結果を保存します。
これは、ファイル拡張子に基づいた、
自動的に描画される異なるテンプレートのような
URLベースのコンテントネゴシエーションで便利です。
フォーマットのカスタマイズの情報は
[[Mojolicious::Guides::Routing]]のC<フォマット>を見てください。
また、[[Mojolicious::Guides::Routing]]のC<リラックスプレースホルダー>
を使うことを考慮してください。
これは、C<.>文字のマッチを許可します。

=head2 コマンドラインからHypnotoadを設定できますか？

いいえ、できません、L <Hypnotoad|Mojo::Server::Hypnotoad>は、この点で少し特別です。
ダウンタイムのないソフトウェアアップグレード（ホット
デプロイメント）を始めるときに、既に実行中のサーバーに対して、C<USR2>シグナルのみを送信していますので、
他の情報を渡すことはできません。代わりに設定のために
L <Mojolicious::Plugin::Config>またはL <Mojolicious::Plugin::JSONConfig>を使用してください

  # myapp.conf
  {
    hypnotoad => {
      listen  => ['http://*:8080'],
      workers => 10
    }
  };

または、ダウンタイムのないソフトウェアアップグレードが実際に必要ない場合は、
L <Mojolicious::Command::prefork>を代わりに使ってください。それ以外はHypnotoadと同じです。

  $ ./myapp.pl prefork -m production -l http://*:8080 -w 10

=head2 "Maximum start-line size exceeded."のエラーは何を意味していますか

これは、リクエスト行、ステータス行、ヘッダーなどの、HTTPメッセージのC<\r\n>で終わる部分の最大の長さの制限です。
この制限はデフォルトでC<10KB>ですが、C<MOJO_MAX_LINE_SIZE>環境変数を使って、この値を変更することができます。

=head2 エラー「... certificate verify failed」はどういう意味ですか？

このエラーには多くのバリエーションがありますが、それらのほとんどはTLS
L<Mojo::UserAgent>での証明書の検証に失敗したということです。これは通常
2つの理由で起こります。最も一般的なのは、ピア証明書が単に無効であることです。
その場合、MITM攻撃が試行されていないことが確実な場合、
属性L<Mojo::UserAgent/"insecure">または証明書の検証を無効にする環境変数C<MOJO_INSECURE>を使用できます。
。それ以外に、L<Mozilla::CA>モジュールが欠落している場合があります。これは多くの場合、
L<IO::Socket::SSL>によって、証明書を検証することが必要とされます。

=head2 "Maximum header size exceeded"のエラーは何を意味していますか?

これは前の答えで説明されたものとほぼ同じですが、
HTTPリクエストとHTTPレスポンスのヘッダーの最大の長さの制限です。
制限は、デフォルトで、8KBで100のヘッダです。
[[Mojo::Headers]]のC<max_lines>と[[Mojo::Headers]]のC<max_line_size>
あるはC<MOJO_MAX_LINES>、C<MOJO_MAX_LINE_SIZE>環境変数で、
変更することができます。

=head2 "Maximum message size exceeded."のエラーは何を意味していますか

アプリケーションをとても大きなリクエストとレスポンスから
守るために、HTTPパーサーは、自動的に新しいデータを受け付けるのを停止する
上限を設けており、ほとんどの場合接続を切断します。
この制限はデフォルトでC<10MB>で、C<MOJO_MAX_MESSAGE_SIZE>
環境変数でこの値を変更することができます。

=head2 "Maximum buffer size exceeded"のエラーは何を意味していますか

この保護のメカニズムは前のふたつの答えとよく似ています。
HTTPパーサーは、チャンク化、圧縮、マルチパートメッセージを解析しますが、
どれくらいの量のコンテンツをバッファリングするかの制限です。
この制限はデフォルトではC<256KB>ですが、C<MOJO_MAX_BUFFER_SIZE>環境変数
を使って変更することができます。

=head2 "Your secret passphrase needs to be changed!!!"は何を意味していますか

[[Mojolicious]]は暗号化クッキーのようなセキュリティの機能のための秘密のパスフレーズを使用します。
デフォルトではアプリケーション名ですが、これはあまり安全とはいえません。
ですので記憶しておいてもらうために、デフォルトのログメッセージ追加しています。
[[Mojolicious]]のC<secrets>属性でこのパスフレーズを変更することができます。

  $app->secrets(['My very secret passphrase.']);

=head2 "What does "Nothing has been rendered, expecting delayed response"は何を意味していますか

[[Mojolicious]]はノンブロッキングI/Oとイベントループの上に構築されるように設計されています。
それで、リクエストが入ってきてすぐにレスポンスが返ってこないときは、
それは意図的なものだと解釈してWebサーバーに応答を返します。
Webサーバーは、タイマーのようなイベントを待っている間に、他のリクエストを処理し、
レスポンスを生成します。

=head2 "Inactivity timeout."は何を意味していますか。

アプリケーションをDoS攻撃から守るために、
すべての接続は非アクティブタイムアウトを持っています。
自動的にドロップする前に、どの程度の時間接続が非アクティブでいることができるかを制限
するものです。
デフォルトでは、ユーザーエージェントのためにC<20>秒が、すべての組み込みサーバーのために
C<15>秒が設定されています。通常は[[Mojo::Server::Daemon]]のC<inactivity_timeout>として言及されます。
このタイムアウトはいつでも適用されるので、
リクエストを処理するために、長い時間が必要となるアプリケーションのために、
微調整する必要があるかもしれません。

=head2 "Premature connection close."は何を意味していますか

このエラーメッセージは、上記のひとつに関連して発生します。
ユーザーエージェントが完全なレスポンスを受け取る前に、
Webサーバーが接続を閉じたということを意味しています。
あるいは、ユーザーエージェントが破棄されたということを意味しています。
こうなった場合は、すべてのコネクションが強制的に閉じられます。

=head2 "Worker 31842 has no heartbeat, restarting."は何を意味していますか。

Hypnotoadワーカープロセスは、マネージャプロセスに、まだ応答可能かどうかを調べるために
定期的な間隔でハートビートメッセージを送ります。
アプリケーションの無限ループのようなブロッキング操作がこれによって防止され、
影響を受けたワーカーがタイムアウトの後にリスタートされます。
[[Mojo::Server::Prefork]]のC<heartbeat_timeout>のデフォルトは20秒で
アプリケーションが必要とすれば、増加させることができます。

=head2 What does "Transaction already destroyed" mean?

基礎となる接続が、接続時間経過で、閉じられ、L<Mojolicious::Controller/"tx">がもはや利用可能でないため、
このエラーメッセージは通常、ノンブロッキング操作の結果を長く待った後に表示されます。
接続が閉じられないよう回避する方法はないですが、このエラーメッセージをトランザクションのリファレンスを
弱参照しないで、維持することによって避けるようにすることができます。

  # トランザクションオブジェクトへの強い参照を保持する
  my $tx = $c->render_later->tx;
  $c->ua->get_p('https://mojolicious.org')->then(sub {
    $c->render(text => 'Visited mojolicious.org');
  })->catch(sub {
    my $err = shift;
    $tx;
    $c->reply->exception($err);
  });

=head2 より学ぶには

[[Mojolicious::Guides]]を学び続けてください。またL<Mojolicious wiki|http://github.com/kraih/mojo/wiki>を見ることもできます。wikiには多くのユーザーによる多くのドキュメントやサンプルがあります。

=head1 サポート

ドキュメントに答えが見つからなくって質問があるときは、
L<メーリングリスト|http://groups.google.com/group/mojolicious>か
公式のIRCチャンネルであるirc.perl.orgの#mojoでためらわずに質問してください。

(Mojolicious 8.12を反映)

=cut