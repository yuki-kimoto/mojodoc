=encoding utf8

[[Mojolicious API リファレンス|mojo-api-reference]]

=head1 名前

Mojolicious::Static - 静的ファイルを提供

=head1 使い方

  use Mojolicious::Static;

  my $static = Mojolicious::Static->new;
  push @{$static->classes}, 'MyApp::Controller::Foo';
  push @{$static->paths}, '/home/sri/public';

=head1 説明

[[Mojolicious::Static]] は、 
L<RFC 7232|http://tools.ietf.org/html/rfc7232>と
L<RFC 7233|http://tools.ietf.org/html/rfc7233>
に基づく
C<Range> と C<If-Modified-Since>とC<If-None-Match> をサポートした
静的ファイルへのディスパッチャです。

=head1 属性

[[Mojolicious::Static]] は以下の属性を実装しています。

=head2 classes

  my $classes = $static->classes;
  $static     = $static->classes(['main']);

[[Mojo::Loader]]を使って、C<DATA> セクションにある静的ファイルを探すためのクラス。
先頭にあるクラスから順に探します。デフォルトは C<main> です。
C<index.html>のようにひとつの拡張子が利用されたファイルだけを探します。

  # DATA セクションに静的ファイルが記述された別のクラスを追加
  push @{$static->classes}, 'Mojolicious::Plugin::Fun';

  # DATAセクションにおいて、優先順位の高い静的ファイルのための他のクラスを追加
  unshift @{$static->classes}, 'Mojolicious::Plugin::MoreFun';

=head2 extra

  my $extra = $static->extra;
  $static   = $static->extra({'foo/bar.txt' => '/home/sri/myapp/bar.txt'});

ビルトインの例外やノットファウンドページで利用される画像のようなものを
"paths"以外の場所からサーブするためのエキストラファイルのパス。
エキストラファイルは、他の代替手段が"paths"と"classes"に見つけられない場合だけ、サーブされることに注意してください。

  # ビルトインのファビコンを除く
  delete $static->extra->{'favicon.ico'};

=head2 paths

  my $paths = $static->paths;
  $static   = $static->paths(['/home/sri/public']);

静的ファイルを提供するディレクトリ。静的ファイルは、先頭にあるディレクトリから順に探します。

  # 別の public ディレクトリを追加
  push @{$static->paths}, '/home/sri/public';

  # 高い優先順位で、別の public ディレクトリを追加
  unshift @{$static->paths}, '/home/sri/themes/blue/public';

=head1 メソッド

[[Mojolicious::Static]] は [[Mojo::Base]] から全てのメソッドを
継承しており、以下の新しいメソッドを実装しています。

=head2 dispatch

  my $bool = $static->dispatch(Mojolicious::Controller->new);

[[Mojolicious::Controller]] オブジェクトをディスパッチします。

=head2 file

  my $asset = $static->file('images/logo.png');
  my $asset = $static->file('../lib/MyApp.pm');

ファイルのための[[Mojo::Asset::File]]あるいは[[Mojo::Asset::Memory]]オブジェクト。
C<paths>への相対か、C<classes>からの相対になります。
見つからなかった場合はC<undef>を返します。
このメソッドは親ディレクトリへのトラバーサルを保護しないので注意してください。

  my $content = $static->file('foo/bar.html')->slurp;

=head2 is_fresh

  my $bool = $static->is_fresh(Mojolicious::Controller->new, {etag => 'abc'});

C<If-None-Match>、C<If-Modified-Since>リクエストヘッダを
C<ETag>、C<Last-Modified>レスポンスと比較して、
新鮮さをチェックします。

以下のオプションが現在では利用可能です。

=over 2

=item etag

  etag => 'abc'

比較の前にC<ETag>ヘッダーを追加します。

=item last_modified

  last_modified => $epoch

比較の前にC<Last-Modified>ヘッダを追加します。

=back

=head2 serve

  my $bool = $static->serve(Mojolicious::Controller->new, 'images/logo.png');
  my $bool = $static->serve(Mojolicious::Controller->new, '../lib/MyApp.pm');

指定したファイルを提供します。C<paths>かC<classes>への相対パスです。
このメソッドは親ディレクトリへのトラバーサルを保護しないので注意してください。

=head2 serve_asset

  $static->serve_asset(Mojolicious::Controller->new, Mojo::Asset::File->new);

C<Range>とC<If-Modified-Since>をサポートした
[[Mojo::Asset::File]]あるいは[[Mojo::Asset::Memory]]オブジェクトをサーブします。

=head2 warmup

  $static->warmup;

将来の利用のために"classes"からの静的ファイルを準備します。

=head1 参考

[[Mojolicious]], [[Mojolicious::Guides]], L<http://mojolicio.us>.

(Mojolicious 8.12を反映。2019年6月13日更新)

=cut