=encoding utf8

[[トップページ|Home]]

ウェブの初期には、多くの人がPerlを学びました。L<CGI>という素晴らしいPerlライブラリがあったからです。言語についてあまり知らずに始めても十分簡単で、それでいてあなたを前進させるには十分強力で、やりながら学習するにはとても面白いものでした。使われていた技術のほとんどは今では時代遅れのものとなっていますが、その背後にある考え方はそうではありません。[[Mojolicious]]は最先端の技術を使って、この考え方を実装する新しい試みです。

=head2 特徴

=over 2

=item *

素晴らしいMVCのWebフレームワーク。[[Mojolicious::Lite]]を通じて簡略した単一ファイルモードをサポート。

=over 2

強力なツールを同梱。レストフルなルート(routes)、Perlスタイルのテンプレート、セッション管理、署名つき(signed)クッキー、テストフレームワーク、静的ファイルサーバ、I18N、最上のUnicodeサポート。その他探せばもっと見つかります。

=back

=item *

とてもクリーンで、ポータブルで、オブジェクト指向の純粋なPerl API(隠れた魔術は使われていません)。必要な要件はPerl 5.10.1以上であることだけ。
(ですが5.12以上をおすすめします。またオプショナルなCPANモジュールがインストールしてあると、より高度な機能を提供するために利用されるでしょう。)

=item *

フルスタックのHTTP 1.1とWebSocketを実装したクライアントとサーバの実装。IPv6、TLS, Bonjour, IDNA, Comet (long polling),チャンキング(chunking)、マルチパート(multipart)をサポート。

=item *

組み込みの非同期IOとプリフォークサーバ。libev、ホットデプロイメント。これらすべてが完全に埋め込まれています。

=item *

自動的なCGIとL<PSGI>の検知。

=item *

JSONとCSS3セレクタを持つXML/HTML5パーサをサポート。

=item *

Catalystを開発した長年の経験の上に構築された新鮮なコード 

=back

=head2 インストール

必要なのはワンライナーだけです。1分もかかりません。

  $ curl get.mojolicio.us | sh

=head2 はじめよう

以下の3行が完全なWebアプリケーションです。

  use Mojolicious::Lite;

  get '/' => {text => 'Hello World!'};

  app->start;

このサンプルを組み込みの開発Webサーバーで実行するには、
コードをファイルに記述して、それをC<morbo>で開始するだけです。

  $ morbo hello.pl
  Server available at http://127.0.0.1:3000.

  $ curl http://127.0.0.1:3000/
  Hello World!

=head2 HTML5 Webのためのダクトテープ

（訳注：ダクトテープ … ガムテープより粘着力や強度に優れたテープの一種。アメリカでは物の修繕に留まらない万能ツールとして重宝されている）

難しいことを可能に、すべてのことを楽しくする、人のためのWeb開発。

  use Mojolicious::Lite;

  # Simple plain text response
  get '/' => {text => 'Hello World!'};

  # Route associating "/time" with template in DATA section
  get '/time' => 'clock';

  # RESTful web service with JSON and text representation
  get '/list/:offset' => sub {
    my $self    = shift;
    my $numbers = [0 .. $self->param('offset')];
    $self->respond_to(
      json => {json => $numbers},
      txt  => {text => join(',', @$numbers)}
    );
  };

  # Scrape information from remote sites
  post '/title' => sub {
    my $self = shift;
    my $url  = $self->param('url') || 'http://mojolicio.us';
    $self->render_text(
      $self->ua->get($url)->res->dom->html->head->title->text);
  };

  # WebSocket echo service
  websocket '/echo' => sub {
    my $self = shift;
    $self->on(message => sub {
      my ($self, $message) = @_;
      $self->send("echo: $message");
    });
  };

  app->start;
  __DATA__

  @@ clock.html.ep
  % use Time::Piece;
  % my $now = localtime;
  The time is <%= $now->hms %>.

このような単一ファイルのプロトタイプから、よく構造化されたアプリケーションに成長させるのも簡単です。

=head2 もっと知るには?

素晴らしいドキュメントを http://mojolicio.us/perldoc でご覧ください!

(2012/2/20更新)

=cut