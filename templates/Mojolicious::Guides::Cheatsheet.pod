=encoding utf8

B<解説がドキュメントの各部に移動されたため、チートシートは削除されました。しばらく後にこのページも削除されます。>

[[Mojoliciosuガイド|Home]]

=head1 Mojolicious::Guides::Cheatsheet

=head1 名前

Mojolicious::Guides::Cheatsheet - リファレンス

=head1 概観

このドキュメントは簡潔で雑多なリファレンスを含んでいます。

=head1 予約されているスタッシュの値

「mojo.」で始まるすべてに加えて、ルートとレンダラのために予約されているスタッシュの値が少しあります。

=head2 C<action>

  $r->route('/welcome')->to(action => 'hello');

ディスパッチ先のアクション

=head2 C<app>

  $r->route('/welcome')->to(app => MyApp->new);

ディスパッチ先の埋め込まれたアプリケーション

=head2 C<cb>

  $r->route('/welcome')->to(cb => sub {...});

ディスパッチ先のコールバック

=head2 C<class>

  $r->route('/welcome')->to(class => 'Greeting');

C<controller>のキャメライズされた別名

=head2 C<controller>

  $r->route('/welcome')->to(controller => 'greetings');

ディスパッチ先のコントローラ

=head2 C<data>

  $self->render(data => 'raw bytes');

生のバイト列をレスポンスに返還

=head2 C<extends>

  $self->render(extends => 'template');

拡張のためのテンプレート

=head2 C<format>

  $self->render(format => 'rss');

描画のためのフォーマット

=head2 C<handler>

  $self->render(handler => 'ep');

描画に使われるハンドラ

=head2 C<inline>

  $self->render(inline => '<%= 1 + 1%>');

描画のためのインラインテンプレート

=head2 C<json>

  $self->render(json => {foo => 23});

Perlデータ構造をJSONレスポンスに変換

=head2 C<layout>

  $self->render(layout => 'green');

描画のためのレイアウト

=head2 C<method>

  $r->route('/welcome')->to(method => 'hello');

actionの別名

=head2 C<namespace>

  $r->route('/welcome')->to(namespace => 'TestApp', method => 'lulz');

ディスパッチ先の名前空間

=head2 C<partial>

  my $result = $self->render(partial => 1);

レスポンスに変換する代わりに、描画の結果を返却

=head2 C<path>

  $r->route('/welcome')->to(path => '/test', app => MyApp->new);

埋め込まれたアプリケーションへのディスパッチで利用されるベースパス

=head2 C<status>

  $self->render(status => 404);

描画されるレスポンスのためのステータスコード

=head2 C<template>

  $self->render(template => 'bye');

描画のためのテンプレート

=head2 C<text>

  $self->render(text => 'Hello World!');

文字をレスポンスに変換

=head1 環境変数

Mojoliciousの多くの部分を環境変数で変更することができます。デバッグ環境変数は開発者だけが利用するので除外しています。

=head2 C<MOJO_APP>

どのMojoliciousあるいはMojoアプリケーションが使われるかを決定する。MyAppのようなクラス名をいつも含んでいるべきです。デフォルトで[[Mojo::HelloWorld]]になっています。

  MOJO_APP=MyApp

=head2 C<MOJO_CA_FILE>

TLSのCAオーソリティファイルへのパス。いつでも「/etc/tls/cacerts.pem」のようなパスを含んでいるべきです。TLSサポートのためにはL<IO::Socket::SSL>がインストールされている必要があります。

  MOJO_CA_FILE=/etc/tls/cacerts.pem

=head2 C<MOJO_CERT_FILE>

TLS認証へのパス。いつでもC</etc/tls/client.crt>のようなパスを含んでいるべきです。
TLSサポートのためにはL<IO::Socket::SSL>がインストールされている必要があることに注意してください。

  MOJO_CERT_FILE=/etc/tls/client.crt

=head2 C<MOJO_CHUNK_SIZE>

IO処理のためのチャンクのバイトサイズ。大きなチャンクサイズを指定すれば、IO処理は多くのメモリを消費します。デフォルトは131072です。

  MOJO_CHUNK_SIZE=1024

=head2 C<MOJO_CONFIG>

[[Mojolicious::Plugin::Config]]と[[Mojolicious::Plugin::JsonConfig]]で利用されるコンフィグファイル。
試験でとても便利です。

 MOJO_CONFIG=myapp.conf

=head2 C<MOJO_HOME>

Mojoliciousアプリケーションのためのホームディレクトリ。いつでも「/home/sri/myapp」のようなパスを含んでいるべきです。

  MOJO_HOME=/home/sri/myapp

=head2 C<MOJO_IOWATCHER>

代わりに試そうとする[[Mojo::IOWatcher]]の実装

  MOJO_IOWATCHER=Mojo::IOWatcher::EV

=head2 C<MOJO_KEY_FILE>

TLSキーへのパス。いつでもC</etc/tls/client.key>のようなパスを含んできるべきです。
TLSのサポートにはL<IO::Socket::SSL>がインストールされていなければならないことに注意してください。

  MOJO_KEY_FILE=/etc/tls/client.key

=head2 C<MOJO_LOG_LEVEL>

[[Mojolicious]]アプリケーションのためのログレベル。C<debug>やC<error>のような適切なログレベルを含んでいるべきです。

  MOJO_LOG_LEVEL=debug
  MOJO_LOG_LEVEL=error

=head2 C<MOJO_MAX_LEFTOVER_SIZE>

パイプライン化されたHTTPリクエストのための、バッファの最大バイトサイズ。
デフォルトはC<262144>です。

  MOJO_MAX_LEFTOVER_SIZE=2048

=head2 C<MOJO_MAX_LINE_SIZE>

HTTPメッセージのスタートラインとヘッダの最大のバイトサイズ。デフォルト10240です。

  MOJO_MAX_LINE_SIZE=2048

=head2 C<MOJO_MAX_MEMORY_SIZE>

メモリに維持できるHTTPコンテントの最大バイトサイズ。この値より大きなコンテントは一時ファイルに書き込まれます。デフォルトでC<262144>です。

  MOJO_MAX_MEMORY_SIZE=2048

=head2 C<MOJO_MAX_MESSAGE_SIZE>

HTTPメッセージの最大バイトサイズ。デフォルトでC<5242880>です。

  MOJO_MAX_MESSAGE_SIZE=1024

=head2 C<MOJO_MAX_REDIRECTS>

[[Mojo::Client]]が続けるリダイレクトの最大数。デフォルトはC<0>。

  MOJO_MAX_REDIRECTS=3

=head2 C<MOJO_MAX_WEBSOCKET_SIZE>

WebSocketメッセージの最大バイトサイズ。デフォルトはC<262144>です。

  MOJO_MAX_WEBSOCKET_SIZE=1024

=head2 C<MOJO_MODE>

[[Mojolicious]]アプリケーションのランモード。C<development>やC<production>のような適切なモードを含んでいるべきです。

  MOJO_MODE=development
  MOJO_MODE=production

=head2 C<MOJO_NO_BONJOUR>

Bonjourサポートを無効にします。BonjourサポートのためにはL<Net::Rendezvous::Publish>
がインストールされていなければなりません。

  MOJO_NO_BONJOUR=1

=head2 C<MOJO_NO_DETECT>

[[Mojolicious]]のデプロイメントのときの環境の検知を向こうにします。

  MOJO_NO_DETECT=1

=head2 C<MOJO_NO_IPV6>

IPv6のサポートを無効にします。これにより、わずかに良いパフォーマンスと省メモリをもたらすかもしれません。IPv6のサポートにはL<IO::Socket::IP>がインストールされていなければならないことに注意してください。

  MOJO_NO_IPV6=1

=head2 C<MOJO_NO_TLS>

TLSのサポートを無効にします。これにより、わずかに良いパフォーマンスと省メモリをもたらすかもしれません。TLSのサポートにはL<IO::Socket::SSL>がインストールされていなければならないことに注意してください。

  MOJO_NO_TLS=1

=head2 C<MOJO_PROXY>

[[Mojo::Client]]における自動的なHTTPとHTTPSのプロキシ検知を有効にします。セキュリティの理由のためにデフォルトでは無効になっています。

  MOJO_PROXY=1

=head2 C<MOJO_REVERSE_PROXY>

[[Mojolicious]]アプリケーションのためにリバースプロキシのサポートを有効にします。
これは[[Mojolicious]]が自動的にC<X-Forwarded-For>,
C<X-Forwarded-Host>, C<X-Forwarded-HTTPS>を検出することを可能にします。

  MOJO_REVERSE_PROXY=1

=head2 C<MOJO_TMPDIR>

大きなアップロードのための一時ファイルのためのディレクトリ。デフォルトではランダムなプラットフォーム固有の一時ディレクトリが使用されます。

  MOJO_TMPDIR=/tmp/mojo

(2012/6/7更新)

=cut
