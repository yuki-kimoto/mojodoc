=encoding utf8

[[Mojolicious API リファレンス|mojo-api-reference]]

=head1 名前

Test::Mojo - Mojoの試験

=head1 使い方

  use Test::More;
  use Test::Mojo;

  my $t = Test::Mojo->new('MyApp');

  # HTML/XML
  $t->get_ok('/welcome')->status_is(200)->text_is('div#message' => 'Hello!');

  # JSON
  $t->post_ok('/search.json' => form => {q => 'Perl'})
    ->status_is(200)
    ->header_is('Server' => 'Mojolicious (Perl)')
    ->header_isnt('X-Bender' => 'Bite my shiny metal ass!')
    ->json_is('/results/4/title' => 'Perl rocks!');

  # WebSocket
  $t->websocket_ok('/echo')
    ->send_ok('hello')
    ->message_ok
    ->message_is('echo: hello')
    ->finish_ok;

  done_testing();

=head1 説明

[[Test::Mojo]] は、[[Mojo]] と [[Mojolicious]] アプリケーションを開発する
すべての人への、テストのためのヘルパーの集まりです。

[[Test::Mojo]]は[[Mojo::UserAgent]]に基づいたテストのためのユーザーエージェントです。
通常は、[[Mojolicious]]アプリケーションをテストするために、L<Test::More>と
一緒に利用されます。
L<prove>を使って、
テストを実行することができます。

  $ prove -l -v
  $ prove -l -v t/foo.t

まだ定義されていなかった場合は、
C<MOJO_LOG_LEVEL>環境変数は
C<HARNESS_IS_VERBOSE>環境変数の値に応じて、
C<debug>かC<fatal>に設定されます。
HTTPS/WSSとWebサービスの試験を簡単にするために[[Mojo::UserAgent]]の"insecure"が"ua"のためにデフォルトで有効になります。

=head1 属性

[[Test::Mojo]]は次の属性を実装しています。

=head2 message

  my $msg = $t->message;
  $t      = $t->message([text => $bytes]);

フレームとペイロードを含んだ
配列のリファレンスとして表現された現在のWebSocketメッセージ。

  # もっと仕様の試験をする
  use Mojo::JSON 'decode_json';
  my $hash = decode_json $t->message->[1];
  is ref $hash, 'HASH', 'right reference';
  is $hash->{foo}, 'bar', 'right value';

  # カスタムメッセージのテスト
  $t->message([binary => $bytes])
    ->json_message_has('/foo/bar')
    ->json_message_hasnt('/bar')
    ->json_message_is('/foo/baz' => {yada => [1, 2, 3]});

=head2 success

  my $bool = $t->success;
  $t       = $t->success($bool);

最後のテストが成功すれば真。

  # Build custom tests
  my $location_is = sub {
    my ($t, $value, $desc) = @_;
    $desc ||= "Location: $value";
    local $Test::Builder::Level = $Test::Builder::Level + 1;
    return $t->success(is($t->tx->res->headers->location, $value, $desc));
  };
  $t->get_ok('/')
    ->status_is(302)
    ->$location_is('http://mojolicio.us')
    ->or(sub { diag 'Must have been Joel!' });

=head2 tx

  my $tx = $t->tx;
  $t     = $t->tx(Mojo::Transaction::HTTP->new);

現在のトランザクション。
通常は [[Mojo::Transaction::HTTP]]または[[Mojo::Transaction::WebSocket]]
オブジェクトです。

  # よりスペシフィックな試験
  is $t->tx->res->json->{foo}, 'bar', 'right value';
  ok $t->tx->res->content->is_multipart, 'multipart content';
  is $t->tx->previous->res->code, 302, 'right status';

=head2 ua

  my $ua = $t->ua;
  $t     = $t->ua(Mojo::UserAgent->new);

テストのために利用されるユーザーエージェント。
デフォルトは[[Mojo::UserAgent]]オブジェクトです。

  # リダイレクトを許可
  $t->ua->max_redirects(10);
  $t->get_ok('/redirect')->status_is(200)->content_like(qr/redirected/);

  # HTTPからHTTPSへプロトコルをスイッチ
  $t->ua->server->url('https');
  $t->get_ok('/secure')->status_is(200)->content_like(qr/secure/);

  # ベーシック認証のリクエストに絶対URLを使う
  my $url = $t->ua->server->url->userinfo('sri:secr3t')->path('/secrets.json');
  $t->post_ok($url => json => {limit => 10})
    ->status_is(200)
    ->json_is('/1/content', 'Mojo rocks!');

  # すべてのトランザクションをカスタマイズ (続くリダイレクトを含む)
  $t->ua->on(start => sub {
    my ($ua, $tx) = @_;
    $tx->req->headers->accept_language('en-US');
  });
  $t->get_ok('/hello')->status_is(200)->content_like(qr/Howdy/);

=head1 メソッド

[[Test::Mojo]]は[[Mojo::Base]]のすべてのメソッドを継承しており、
次の新しいメソッドを実装しています。

=head2 app

  my $app = $t->app;
  $t      = $t->app(Mojolicious->new);

[[Mojo::UserAgent::Server]]のC<app>にアクセスします。

  # ログレベルの変更
  $t->app->log->level('fatal');

  # アプリケーションを直接試験する
  is $t->app->defaults->{foo}, 'bar', 'right value';
  ok $t->app->routes->find('echo')->is_websocket, 'WebSocket route';
  my $c = $t->app->build_controller;
  ok $c->render(template => 'foo'), 'rendering was successful';
  is $c->res->status, 200, 'right status';
  is $c->res->body, 'Foo!', 'right content';

  # アプリケーションの動きを変更
  $t->app->hook(before_dispatch => sub {
    my $c = shift;
    $c->render(text => 'This request did not reach the router.')
      if $c->req->url->path->contains('/user');
  });
  $t->get_ok('/user')->status_is(200)->content_like(qr/not reach the router/);

  # 追加の情報を抽出
  my $stash;
  $t->app->hook(after_dispatch => sub { $stash = shift->stash });
  $t->get_ok('/hello')->status_is(200);
  is $stash->{foo}, 'bar', 'right value';

=head2 content_is

  $t = $t->content_is('working!');
  $t = $t->content_is('working!', 'right content!');

[[Mojo::Message]]のC<text>からコンテンツを取得した後に、
レスポンスのコンテンツが完全に一致するかをチェックします。

=head2 content_isnt

  $t = $t->content_isnt('working!');
  $t = $t->content_isnt('working!', 'different content');

C<content_is>の否定です。

=head2 content_like

  $t = $t->content_like(qr/working!/);
  $t = $t->content_like(qr/working!/, 'right content!');

[[Mojo::Message]]のC<text>からコンテンツを取得した後に、
レスポンスが類似マッチするかどうかをチェックします。

=head2 content_type_is

  $t = $t->content_type_is('text/html');

レスポンスの C<Content-Type> ヘッダが完全に一致するかをチェックします。

=head2 content_type_isnt

  $t = $t->content_type_isnt('text/html');
  $t = $t->content_type_isnt('text/html', 'different content type');

C<content_type_is>の否定です。

=head2 content_type_like

  $t = $t->content_type_like(qr/text/);
  $t = $t->content_type_like(qr/text/, 'right content type!');

レスポンスの C<Content-Type> ヘッダが類似マッチするかどうかをチェックします。

=head2 content_type_unlike

  $t = $t->content_type_unlike(qr/text/);
  $t = $t->content_type_unlike(qr/text/, 'different content type');

C<content_type_like>の否定です。

=head2 content_unlike

  $t = $t->content_unlike(qr/working!/);
  $t = $t->content_unlike(qr/working!/, 'different content');

C<content_like>の否定です。

=head2 delete_ok

  $t = $t->delete_ok('http://example.com/foo');
  $t = $t->delete_ok('/foo');
  $t = $t->delete_ok('/foo' => {Accept => '*/*'} => 'Content!');
  $t = $t->delete_ok('/foo' => {Accept => '*/*'} => form => {a => 'b'});
  $t = $t->delete_ok('/foo' => {Accept => '*/*'} => json => {a => 'b'});

C<DELETE> リクエストを実行し、成功するかどうかをチェックします。
[[Mojo::UserAgent]]のC<delete>と同じ引数を受け取ります。

=head2 element_count_is

  $t = $t->element_count_is('div.foo[x=y]', 5);
  $t = $t->element_count_is('html body div', 30, 'thirty elements');

[[Mojo::DOM]]の"find"を使ってCSSセレクタにマッチするHTML/XML要素の数を確認します。

=head2 element_exists

  $t = $t->element_exists('div.foo[x=y]');
  $t = $t->element_exists('html head title', 'has a title');

[[Mojo::DOM]] のC<at>を使って、CSS3 セレクタと最初にマッチする XML/HTML 要素が
存在するかをチェックします。

  # 属性値のチェック
  $t->get_ok('/login')
    ->element_exists('label[for=email]')
    ->element_exists('input[name=email][type=text][value*="example.com"]')
    ->element_exists('label[for=pass]')
    ->element_exists('input[name=pass][type=password]')
    ->element_exists('input[type=submit][value]');

=head2 element_exists_not

  $t = $t->element_exists_not('div.foo[x=y]');
  $t = $t->element_exists_not('html head title', 'has no title');

C<element_exists>の否定です。

=head2 finish_ok

  $t = $t->finish_ok;
  $t = $t->finish_ok(1000);
  $t = $t->finish_ok(1003 => 'Cannot accept data!');

WebSocket接続が終了しているか。

=head2 finished_ok

  $t = $t->finished_ok(1000);

Webソケット接続が緩やかに閉じるまで待ち、ステータスをチェックします。

=head2 get_ok

  $t = $t->get_ok('http://example.com/foo');
  $t = $t->get_ok('/foo');
  $t = $t->get_ok('/foo' => {Accept => '*/*'} => 'Content!');
  $t = $t->get_ok('/foo' => {Accept => '*/*'} => form => {a => 'b'});
  $t = $t->get_ok('/foo' => {Accept => '*/*'} => json => {a => 'b'});

C<GET> リクエストを実行し、成功するかどうかをチェックします。
[[Mojo::UserAgent]]のC<get>と同じ引数を受け取ります。

  # リモートホストに対して、試験を実行
  $t->get_ok('http://mojolicio.us/perldoc')->status_is(200);

  # ベーシック認証においてリクエストのために相対URLを使用する
  $t->get_ok('//sri:secr3t@/secrets.json')
    ->status_is(200)
    ->json_is('/1/content', 'Mojo rocks!');

  # トランザクションの追加の試験をする
  $t->get_ok('/foo')->status_is(200);
  is $t->tx->res->dom->at('input')->{value}, 'whatever', 'right value';

=head2 head_ok

  $t = $t->head_ok('http://example.com/foo');
  $t = $t->head_ok('/foo');
  $t = $t->head_ok('/foo' => {Accept => '*/*'} => 'Content!');
  $t = $t->head_ok('/foo' => {Accept => '*/*'} => form => {a => 'b'});
  $t = $t->head_ok('/foo' => {Accept => '*/*'} => json => {a => 'b'});

C<HEAD> リクエストを実行し、成功するかどうかをチェックします。
[[Mojo::UserAgent]]のC<head>と同じ引数を受け取ります。

=head2 header_is

  $t = $t->header_is(ETag => '"abc321"');
  $t = $t->header_is(ETag => '"abc321"', 'right header');

レスポンスヘッダが完全に一致するかどうかをチェックします。

=head2 header_isnt

  $t = $t->header_isnt(Etag => '"abc321"');
  $t = $t->header_isnt(ETag => '"abc321"', 'different header');

C<header_is>の否定です。

=head2 header_like

  $t = $t->header_like(ETag => qr/abc/);
  $t = $t->header_like(ETag => qr/abc/, 'right header');

レスポンスヘッダが類似マッチするかどうかをチェックします。

=head2 header_unlike

  $t = $t->header_unlike(ETag => qr/abc/);
  $t = $t->header_unlike(ETag => qr/abc/, 'different header');

C<header_like>の否定です。

=head2 json_has

  $t = $t->json_has('/foo');
  $t = $t->json_has('/minibar', 'has a minibar');

[[Mojo::JSON::Pointer]]で与えられたJSONポインターを使って、
JSONレスポンスに識別される値が含まれているかどうかをチェックします。

=head2 json_hasnt

  $t = $t->json_hasnt('/foo');
  $t = $t->json_hasnt('/minibar', 'no minibar');

C<json_has>の否定。

=head2 json_is

  $t = $t->json_is({foo => [1, 2, 3]});
  $t = $t->json_is('/foo' => [1, 2, 3]);
  $t = $t->json_is('/foo/1' => 2, 'right value');

[[Mojo::JSON::Pointer]]で与えられたJSONポインタを使って、
JSONレスポンスから抽出された値をチェックします。
JSONポインタが省略された場合は、ルート(C</>)になります。

=head2 json_like

  $t = $t->json_like('/foo/1' => qr/^\d+$/);
  $t = $t->json_like('/foo/1' => qr/^\d+$/, 'right value');

[[Mojo::JSON::Pointer]]で
与えられたJSONポインタを使って、
JSONレスポンスから抽出された値を、類似チェックします。

=head2 json_message_has

  $t = $t->json_message_has('/foo');
  $t = $t->json_message_has('/minibar', 'has a minibar');

[[Mojo::JSON::Pointer]]によって与えられたJSONポインタをを使って、識別される値がJSON WebSocketメッセージに含まれているかどうかをチェックします。

=head2 json_message_hasnt

  $t = $t->json_message_hasnt('/foo');
  $t = $t->json_message_hasnt('/minibar', 'no minibar');

C<json_message_has>の否定。

=head2 json_message_like

  $t = $t->json_message_like('/foo/1' => qr/^\d+$/);
  $t = $t->json_message_like('/foo/1' => qr/^\d+$/, 'right value');

[[Mojo::JSON::Pointer]]によって
与えられたJSONポインタを使用して、
JSON WebSocketメッセージから抽出された値の類似チェックします。

=head2 json_message_unlike

  $t = $t->json_message_unlike('/foo/1' => qr/^\d+$/);
  $t = $t->json_message_unlike('/foo/1' => qr/^\d+$/, 'different value');

C<json_message_like>の反対。

=head2 json_message_is

  $t = $t->json_message_is({foo => [1, 2, 3]});
  $t = $t->json_message_is('/foo' => [1, 2, 3]);
  $t = $t->json_message_is('/foo/1' => 2, 'right value');

[[Mojo::JSON::Pointer]]によって与えられたJSONポインタをを使って、
JSON WebSocketメッセージから抽出された値をチェックします。
JSONポインタが省略された場合は、ルート(C</>)になります。

=head2 json_message_like

  $t = $t->json_message_like('/foo/1' => qr/^\d+$/);
  $t = $t->json_message_like('/foo/1' => qr/^\d+$/, 'right value');

[[Mojo::JSON::Pointer]]によるJSONポインタを使って、JSON WebSocketメッセージから抽出された値の類似性を確認します。

=head2 json_message_unlike

  $t = $t->json_message_unlike('/foo/1' => qr/^\d+$/);
  $t = $t->json_message_unlike('/foo/1' => qr/^\d+$/, 'different value');

"json_message_like"の反対。

=head2 json_unlike

  $t = $t->json_unlike('/foo/1' => qr/^\d+$/);
  $t = $t->json_unlike('/foo/1' => qr/^\d+$/, 'different value');

"json_like"の反対。

=head2 message_is

  $t = $t->message_is({binary => $bytes});
  $t = $t->message_is({text   => $bytes});
  $t = $t->message_is('working!');
  $t = $t->message_is('working!', 'right message');

WebSocketメッセージが完全に一致するかをチェックします。

=head2 message_isnt

  $t = $t->message_isnt({binary => $bytes});
  $t = $t->message_isnt({text   => $bytes});
  $t = $t->message_isnt('working!');
  $t = $t->message_isnt('working!', 'different message');

C<message_is>の否定。

=head2 message_like

  $t = $t->message_like({binary => qr/$bytes/});
  $t = $t->message_like({text   => qr/$bytes/});
  $t = $t->message_like(qr/working!/);
  $t = $t->message_like(qr/working!/, 'right message');

WebSocketメッセージが類似マッチするかどうかをチェックします。

=head2 message_ok

  $t = $t->message_ok;
  $t = $t->message_ok('got a message');

次のWebSocketメッセージが到着するのを待ちます。

  # メッセージを待って、複数の試験を実行する
  $t->websocket_ok('/time')
    ->message_ok
    ->message_like(qr/\d+/)
    ->message_unlike(qr/\w+/)
    ->finish_ok;

=head2 message_unlike

  $t = $t->message_unlike({binary => qr/$bytes/});
  $t = $t->message_unlike({text   => qr/$bytes/});
  $t = $t->message_unlike(qr/working!/);
  $t = $t->message_unlike(qr/working!/, 'different message');

C<message_like>の否定。

=head2 new

  my $t = Test::Mojo->new;
  my $t = Test::Mojo->new('MyApp');
  my $t = Test::Mojo->new('MyApp', {foo => 'bar'});
  my $t = Test::Mojo->new(Mojo::File->new('/path/to/myapp.pl'));
  my $t = Test::Mojo->new(Mojo::File->new('/path/to/myapp.pl'), {foo => 'bar'});
  my $t = Test::Mojo->new(MyApp->new);
  my $t = Test::Mojo->new(MyApp->new, {foo => 'bar'});

新しい[Test::Mojo]]オブジェクトを生成します。加えて、クラス名か、アプリケーションスクリプトを示した[[Mojo::File]]オブジェクトと、アプリケーションの設定を上書きした設定の値をハッシュリファレンスで渡すことができます。特別な設定値であるC<config_override>は、[[Mojolicious]]の"config"を同様に設定し、[[Mojolicious::Plugin::Config]]と[[Mojolicious::Plugin::JSONConfig]]による設定を、試験のために無効にします。

  # "t"ディレクトリへのアプリケーションスクリプトの相対パスから読み込み
  use Mojo::File 'path';
  my $t = Test::Mojo->new(path(__FILE__)->dirname->sibling('myapp.pl'));

=head2 options_ok

  $t = $t->options_ok('http://example.com/foo');
  $t = $t->options_ok('/foo');
  $t = $t->options_ok('/foo' => {Accept => '*/*'} => 'Content!');
  $t = $t->options_ok('/foo' => {Accept => '*/*'} => form => {a => 'b'});
  $t = $t->options_ok('/foo' => {Accept => '*/*'} => json => {a => 'b'});

C<OPTIONS> リクエストを実行し、成功するかどうかをチェックします。
[[Mojo::UserAgent]]のC<options>とまったく同じ引数を受け取ります。

=head2 or

  $t = $t->or(sub {...});

C<success>の値が偽であれば、コールバックを実行します。

  # 詳細を出力
  $t->get_ok('/bad')->or(sub { diag 'Must have been Glen!' })
    ->status_is(200)->or(sub { diag $t->tx->res->dom->at('title')->text });

=head2 patch_ok

  $t = $t->patch_ok('http://example.com/foo');
  $t = $t->patch_ok('/foo');
  $t = $t->patch_ok('/foo' => {Accept => '*/*'} => 'Content!');
  $t = $t->patch_ok('/foo' => {Accept => '*/*'} => form => {a => 'b'});
  $t = $t->patch_ok('/foo' => {Accept => '*/*'} => json => {a => 'b'});

C<PATCH> リクエストを実行し、成功するかどうかをチェックします。
[[Mojo::UserAgent]]のC<patch>とまったく同じ引数を受け取ります。

=head2 post_ok

  $t = $t->post_ok('http://example.com/foo');
  $t = $t->post_ok('/foo');
  $t = $t->post_ok('/foo' => {Accept => '*/*'} => 'Content!');
  $t = $t->post_ok('/foo' => {Accept => '*/*'} => form => {a => 'b'});
  $t = $t->post_ok('/foo' => {Accept => '*/*'} => json => {a => 'b'});

C<POST> リクエストを実行し、成功するかどうかをチェックします。
[[Mojo::UserAgent]]のC<post>とまったく同じ引数を受け取ります。

=head2 post_form_ok

  $t = $t->post_form_ok('/foo' => {a => 'b'});
  $t = $t->post_form_ok('/foo' => 'UTF-8' => {a => 'b'} => {DNT => 1});

C<POST> フォームを送信し、成功するかどうかをチェックします。
[[Mojo::UserAgent]]のC<post_form>とまったく同じ引数を受け取ります。

  # ファイルアップロードの試験
  my $upload = {foo => {content => 'bar', filename => 'baz.txt'}};
  $t->post_ok('/upload' => form => $upload)->status_is(200);

  # JSON APIの試験
  $t->post_json_ok('/hello.json' => json => {hello => 'world'})
    ->status_is(200)
    ->json_is({bye => 'world'});

=head2 put_ok

  $t = $t->put_ok('http://example.com/foo');
  $t = $t->put_ok('/foo');
  $t = $t->put_ok('/foo' => {Accept => '*/*'} => 'Content!');
  $t = $t->put_ok('/foo' => {Accept => '*/*'} => form => {a => 'b'});
  $t = $t->put_ok('/foo' => {Accept => '*/*'} => json => {a => 'b'});

C<PUT> リクエストを実行し、成功するかどうかをチェックします。
[[Mojo::UserAgent]]のC<put>とまったく同じ引数を受け取ります。

=head2 request_ok

  $t = $t->request_ok(Mojo::Transaction::HTTP->new);

リクエストを実行し、透過的なエラーのためのチェックを行います。

  # カスタムメソッドによるリクエスト
  my $tx = $t->ua->build_tx(FOO => '/test.json' => json => {foo => 1});
  $t->request_ok($tx)->status_is(200)->json_is({success => 1});

  # カスタムクッキーでリクエスト
  my $tx = $t->ua->build_tx(GET => '/account');
  $tx->req->cookies({name => 'user', value => 'sri'});
  $t->request_ok($tx)->status_is(200)->text_is('head > title' => 'Hello sri');

  # カスタムWebSocketハンドシェイク
  my $tx = $t->ua->build_websocket_tx('/foo');
  $tx->req->headers->remove('User-Agent');
  $t->request_ok($tx)->message_ok->message_is('bar')->finish_ok;

=head2 reset_session

  $t = $t->reset_session;

ユーザーエージェントのセッションをリセットします。

=head2 send_ok

  $t = $t->send_ok({binary => $bytes});
  $t = $t->send_ok({text   => $bytes});
  $t = $t->send_ok({json   => {test => [1, 2, 3]}});
  $t = $t->send_ok([$fin, $rsv1, $rsv2, $rsv3, $op, $payload]);
  $t = $t->send_ok($chars);
  $t = $t->send_ok($chars, 'sent successfully');

WebSocketメッセージあるいはフレームを送信します。

  # JSONオブジェクトをテキストメッセージとして送信
  $t->websocket_ok('/echo.json')
    ->send_ok({json => {test => 'I ♥ Mojolicious!'}})
    ->message_ok
    ->json_message_is('/test' => 'I ♥ Mojolicious!')
    ->finish_ok;

=head2 status_is

  $t = $t->status_is(200);
  $t = $t->status_is(200, 'right status');

レスポンスのステータスが完全に一致するかをチェックします。

=head2 status_isnt

  $t = $t->status_isnt(200);
  $t = $t->status_isnt(200, 'different status');

C<status_is>の否定です。

=head2 text_is

  $t = $t->text_is('div.foo[x=y]' => 'Hello!');
  $t = $t->text_is('html head title' => 'Hello!', 'right title');

[[Mojo::DOM]] のC<at>を使って、CSS3 セレクタと最初にマッチする XML/HTML 要素の
テキスト内容が完全に一致するかどうかをチェックします。

=head2 text_isnt

  $t = $t->text_isnt('div.foo[x=y]' => 'Hello!');
  $t = $t->text_isnt('html head title' => 'Hello!', 'different title');

C<text_is>の否定です。

=head2 text_like

  $t = $t->text_like('div.foo[x=y]' => qr/Hello/);
  $t = $t->text_like('html head title' => qr/Hello/, 'right title');

[[Mojo::DOM]]のC<at>を使って、CSS3 セレクタと最初にマッチする XML/HTML 要素の
テキスト内容が類似マッチするかどうかをチェックします。

=head2 text_unlike

  $t = $t->text_unlike('div.foo[x=y]' => qr/Hello/);
  $t = $t->text_unlike('html head title' => qr/Hello/, 'different title');

C<text_like>の否定です。

=head2 websocket_ok

  $t = $t->websocket_ok('http://example.com/echo');
  $t = $t->websocket_ok('/echo');
  $t = $t->websocket_ok('/echo' => {DNT => 1} => ['v1.proto']);

透過的なハンドシェイクでWebSocket接続がオープンするかをチェックします。
[[Mojo::UserAgent]]のC<websocket>とまったく同じ引数を受け取ります。

  # permessage-deflate圧縮のついたWebSocket
  $t->websocket_ok('/' => {'Sec-WebSocket-Extensions' => 'permessage-deflate'})
    ->send_ok('y' x 50000)
    ->message_ok
    ->message_is('z' x 50000)
    ->finish_ok;

=head1 参考

[[Mojolicious]], [[Mojolicious::Guides]], L<http://mojolicio.us>.

(Mojolicious 8.12を反映。2019年6月15日更新)

=cut